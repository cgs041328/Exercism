
==================== FINAL INTERFACE ====================
2018-11-26 07:52:58.934882 UTC

interface main:Main 8043
  interface hash: 39c6c6b74fa468276d3c8f7163cb4689
  ABI hash: 3569258a28cbc49296e616e1bcb1981b
  export-list hash: 99ac11c215c8bcb56cb8f6cc40d08fc7
  orphan hash: fedd5db563e57439a3cf91421a706feb
  flag hash: f4fda28648a61eaea4e3b5fe84b0b7aa
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: HUnit-1.6.0.0 QuickCheck-2.11.3 Win32-2.6.1.0
                      ansi-terminal-0.8.0.4 array-0.5.2.0 base-4.11.1.0
                      bytestring-0.10.8.2 call-stack-0.1.0 clock-0.7.2 colour-2.3.4
                      containers-0.5.11.0 deepseq-1.4.3.0 directory-1.3.1.5
                      filepath-1.4.2 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 hspec-2.5.5
                      hspec-core-2.5.5 hspec-expectations-0.8.2 integer-gmp-1.0.2.0
                      mintty-0.1.2 perfect-numbers-1.1.0.4 pretty-1.1.3.6
                      primitive-0.6.3.0 quickcheck-io-0.2.0 random-1.1 setenv-0.1.1.3
                      stm-2.4.5.0 template-haskell-2.13.0.0 tf-random-0.5 time-1.8.0.2
                      transformers-0.5.5.0
orphans: colour-2.3.4:Data.Colour
         quickcheck-io-0.2.0:Test.QuickCheck.IO
         transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         stm-2.4.5.0:Control.Monad.STM base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         clock-0.7.2:System.Clock containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         hspec-core-2.5.5:Test.Hspec.Core.Example
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
import  -/  base-4.11.1.0:Data.Foldable 6cf3e918f22d03c0870804f05cd183d1
import  -/  base-4.11.1.0:GHC.Base b7dd14d8fe8d606dde5678ea6b0575e9
import  -/  base-4.11.1.0:Prelude aca391812f777207b15d62bb5b9feb63
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  hspec-2.5.5:Test.Hspec 54df06f5d545fec5f91cea5cb55c0ae8
import  -/  hspec-2.5.5:Test.Hspec.Runner 9fe7f63f5e6ed51f346724e5e71cfbc5
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Config.Options 44eafedded707b18de0b18ece30e85fc
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Runner aacfbe7ef9810029c809d32d98b97f0a
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Spec c73480f52a618942c509ac8e85ded21d
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Spec.Monad e5e9ce617af58e105519cbbabb1c58c0
import  -/  hspec-expectations-0.8.2:Test.Hspec.Expectations 40271346c6df10d72d14c4ff3ae952ea
import  -/  perfect-numbers-1.1.0.4:PerfectNumbers a292da49040f168d306fb2d08133144c
5b3f8f9da8a74635580a9919abd4619d
  $s$fEqMaybe ::
    GHC.Classes.Eq (GHC.Base.Maybe PerfectNumbers.Classification)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe PerfectNumbers.Classification)
                  (\ (ds :: GHC.Base.Maybe PerfectNumbers.Classification)
                     (ds1 :: GHC.Base.Maybe PerfectNumbers.Classification) ->
                   case ds of wild {
                     GHC.Base.Nothing
                     -> case ds1 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.True
                          GHC.Base.Just ipv -> GHC.Types.False }
                     GHC.Base.Just a1
                     -> case ds1 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.False
                          GHC.Base.Just b1
                          -> PerfectNumbers.$fEqClassification_$c== a1 b1 } })
                  Main.$s$fEqMaybe_$s$fEqMaybe_$c/= -}
49c774e0aadb96fe5a5e588caa9024df
  $s$fEqMaybe_$c== ::
    GHC.Base.Maybe PerfectNumbers.Classification
    -> GHC.Base.Maybe PerfectNumbers.Classification -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Base.Maybe PerfectNumbers.Classification)
                   (ds1 :: GHC.Base.Maybe PerfectNumbers.Classification) ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a1
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1
                        -> PerfectNumbers.$fEqClassification_$c== a1 b1 } }) -}
94f388b274f7d1b94c78433149707668
  $s$fEqMaybe_$s$fEqMaybe_$c/= ::
    GHC.Base.Maybe PerfectNumbers.Classification
    -> GHC.Base.Maybe PerfectNumbers.Classification -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: GHC.Base.Maybe PerfectNumbers.Classification)
                   (y :: GHC.Base.Maybe PerfectNumbers.Classification) ->
                 case x of wild {
                   GHC.Base.Nothing
                   -> case y of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just ipv -> GHC.Types.True }
                   GHC.Base.Just a1
                   -> case y of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just b1
                        -> case a1 of wild2 {
                             PerfectNumbers.Deficient
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  PerfectNumbers.Deficient -> GHC.Types.False }
                             PerfectNumbers.Perfect
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  PerfectNumbers.Perfect -> GHC.Types.False }
                             PerfectNumbers.Abundant
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  PerfectNumbers.Abundant -> GHC.Types.False } } } }) -}
883e0a9180ede06af8b51407e88e4ef5
  $s$fShowMaybe ::
    GHC.Show.Show (GHC.Base.Maybe PerfectNumbers.Classification)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe PerfectNumbers.Classification)
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ PerfectNumbers.Classification
                     PerfectNumbers.$fShowClassification)
                  (\ (x :: GHC.Base.Maybe PerfectNumbers.Classification) ->
                   case x of wild {
                     GHC.Base.Nothing -> GHC.Show.$fShowMaybe4
                     GHC.Base.Just b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n GHC.Show.$fShowMaybe1)
                          (PerfectNumbers.$fShowClassification_$cshowsPrec
                             GHC.Show.appPrec1
                             b1
                             (GHC.Types.[] @ GHC.Types.Char)) })
                  (\ (ls :: [GHC.Base.Maybe PerfectNumbers.Classification])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (GHC.Base.Maybe PerfectNumbers.Classification)
                     (GHC.Show.$fShowMaybe_$cshowsPrec
                        @ PerfectNumbers.Classification
                        PerfectNumbers.$fShowClassification
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
d5e448ce4e57dbc337eccabfe83b7adc
  $s$fShowMaybe_$cshowList ::
    [GHC.Base.Maybe PerfectNumbers.Classification] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [GHC.Base.Maybe PerfectNumbers.Classification])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Base.Maybe PerfectNumbers.Classification)
                   (GHC.Show.$fShowMaybe_$cshowsPrec
                      @ PerfectNumbers.Classification
                      PerfectNumbers.$fShowClassification
                      GHC.Show.$fShow(,)1)
                   ls
                   s) -}
8f470deca0048d02e6fc8121ab8abb17
  $tc'Case :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8197111133229858407##
                   13847006553897280588##
                   Main.$trModule
                   Main.$tc'Case2
                   0#
                   Main.$tc'Case1) -}
6fc21dd8b35ae7df9abfcd56a3c1f8ad
  $tc'Case1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0c0299238ee13fbc2e14231d59357ec9
  $tc'Case2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Case3) -}
b70b9a2f50a01b383c0fc203a93b45f6
  $tc'Case3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Case"#) -}
9f9427b68a1c0df6b95c3a3d566064e4
  $tcCase :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   990021888930651814##
                   4262142848388084561##
                   Main.$trModule
                   Main.$tcCase1
                   0#
                   GHC.Types.krep$*) -}
b0dff1fba9a2e1fbd8ccfcfdc7bfd5cc
  $tcCase1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcCase2) -}
7179be3aa9b5f07778c569f16b1ed2bf
  $tcCase2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Case"#) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
ebdc1dd53ec4919e59d84ef41a8efcfe
  $wc ::
    GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Base.Maybe PerfectNumbers.Classification
    -> Control.Monad.Trans.Writer.Lazy.WriterT
         [Test.Hspec.Core.Tree.SpecTree ()] GHC.Types.IO ()
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 5,
     Strictness: <L,1*U><L,U(U)><L,U><C(S(SL)),1*C1(U(U,U(1*U,1*U)))><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Base.Maybe PerfectNumbers.Classification)
                   (w :: Control.Monad.Trans.Writer.Lazy.WriterT
                           [Test.Hspec.Core.Tree.SpecTree ()] GHC.Types.IO ())
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w `cast`
                      (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                           <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                           <GHC.Types.IO>_R
                           <()>_N ; GHC.Types.N:IO[0]
                                        <((), [Test.Hspec.Core.Tree.SpecTree ()])>_R)
                        w1 of ds1 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    (case ipv3 of wild1 { (,) b1 w' -> b1 },
                     GHC.Base.++
                       @ (Test.Hspec.Core.Tree.Tree
                            (Test.Hspec.Core.Example.ActionWith ())
                            (Test.Hspec.Core.Tree.Item ()))
                       (GHC.Types.:
                          @ (Test.Hspec.Core.Tree.SpecTree
                               (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                          (Test.Hspec.Core.Tree.Leaf
                             @ (Test.Hspec.Core.Example.ActionWith
                                  (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                             @ (Test.Hspec.Core.Tree.Item
                                  (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                             (Test.Hspec.Core.Tree.Item
                                @ (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                                (case ww of wild {
                                   []
                                   -> case Main.main44 of wild1 {
                                        GHC.Base.Nothing -> Test.Hspec.Core.Tree.specItem1
                                        GHC.Base.Just v -> v }
                                   : ds2 ds3 -> wild })
                                Main.main34
                                (GHC.Base.Nothing @ GHC.Types.Bool)
                                (Test.Hspec.Core.Example.safeEvaluateExample1
                                   @ Test.Hspec.Expectations.Expectation
                                   Test.Hspec.Core.Example.$fExampleIO1
                                     `cast`
                                   ((<Test.Hspec.Expectations.Expectation>_R
                                     ->_R <Test.Hspec.Core.Example.Params>_R
                                     ->_R <(Test.Hspec.Core.Example.Arg
                                              Test.Hspec.Expectations.Expectation
                                            -> GHC.Types.IO ())
                                           -> GHC.Types.IO ()>_R
                                     ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                                     ->_R Sym (GHC.Types.N:IO[0]
                                                   <Test.Hspec.Core.Example.Result>_R)) ; Sym (Test.Hspec.Core.Example.N:Example[0]
                                                                                                   <Test.Hspec.Expectations.Expectation>_N))
                                   (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                    Test.HUnit.Lang.assertEqual1
                                      @ (GHC.Base.Maybe PerfectNumbers.Classification)
                                      Main.main21
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                      Main.$s$fEqMaybe
                                      Main.$s$fShowMaybe
                                      (GHC.Types.[] @ GHC.Types.Char)
                                      ww2
                                      (PerfectNumbers.classify ww1)
                                      eta2)
                                     `cast`
                                   (Sym (GHC.Types.N:IO[0] <()>_R)))
                                  `cast`
                                (<Test.Hspec.Core.Example.Params>_R
                                 ->_R <Test.Hspec.Core.Example.ActionWith
                                         (Test.Hspec.Core.Example.Arg
                                            Test.Hspec.Expectations.Expectation)
                                       -> GHC.Types.IO ()>_R
                                 ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                                 ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))))
                          (GHC.Types.[]
                             @ (Test.Hspec.Core.Tree.SpecTree
                                  (Test.Hspec.Core.Example.Arg
                                     Test.Hspec.Expectations.Expectation))))
                         `cast`
                       ([(Test.Hspec.Core.Tree.Tree
                            (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                             ->_R <GHC.Types.IO ()>_R)
                            (Test.Hspec.Core.Tree.Item
                               (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R
                       (case ipv3 of wild { (,) b1 w' -> w' })) #) }) -}
d49dc681dd761578d7011826413ada9c
  data Case
    = Case {description :: GHC.Base.String,
            number :: GHC.Types.Int,
            expected :: GHC.Base.Maybe PerfectNumbers.Classification}
d49dc681dd761578d7011826413ada9c
  description :: Main.Case -> GHC.Base.String
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 -> ds1 }) -}
d49dc681dd761578d7011826413ada9c
  expected ::
    Main.Case -> GHC.Base.Maybe PerfectNumbers.Classification
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 -> ds3 }) -}
4c3f011be0bb06ca37cb585cdb2ebd5a
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
93c1875fb3788bf982315d52af8df76d
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Test.Hspec.Core.Runner.hspec2
                        Main.main96
                        Main.main2
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { Test.Hspec.Core.Runner.Summary ds ds2 ->
                 case ds2 of wild1 { GHC.Types.I# x ->
                 case x of wild2 {
                   DEFAULT -> System.Exit.exitFailure1 @ () ipv
                   0# -> (# ipv, GHC.Tuple.() #) } } } }) -}
2d6cf7632d7e441228bef1d279db1361
  main10 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main62
                   Main.main61
                   Main.main51
                   Main.main11
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
7b1b38ab26871fb3a7043f6fbe40ae56
  main11 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main59
                   Main.main58
                   Main.main51
                   Main.main12
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
8d337a57b20d0b0607f0cc2b9369b38c
  main12 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main56
                   Main.main55
                   Main.main51
                   Main.main13
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
8ddbdacba203d96659429fb529c25669
  main13 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main53
                   Main.main52
                   Main.main51
                   Main.main14
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
5563a6a8158d3b2902339617128eda50
  main14 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main49
                   Main.main48
                   (GHC.Base.Nothing @ PerfectNumbers.Classification)
                   Main.main15
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
dfe1a43c987ae6f06f8abd4b2462b833
  main15 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main19
                   Main.main18
                   (GHC.Base.Nothing @ PerfectNumbers.Classification)
                   Main.main16
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
e7a2bc091dc6d855f9f5365f9aa265ab
  main16 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, Main.main17 #)) -}
4f8201a973ef2591f5819fcd4a7c8516
  main17 :: ((), [Test.Hspec.Core.Tree.SpecTree ()])
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Tuple.(),
                  GHC.Types.[]
                    @ (Test.Hspec.Core.Tree.Tree
                         (Test.Hspec.Core.Example.ActionWith ())
                         (Test.Hspec.Core.Tree.Item ())))) -}
d6b5f4b4e31c4a11d02a59c3f3ee815c
  main18 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# -1#) -}
0e30ccf6b232266699110f263e21edda
  main19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main20) -}
aa37de634a8335ad99044bee91aba2f0
  main2 :: Test.Hspec.Core.Spec.Monad.SpecWith ()
  {- Unfolding: (Main.main89
                   Main.main87
                   Main.main3
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                       <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                       <GHC.Types.IO>_R
                                                       <()>_N) ; Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                          <()>_N) <()>_N))) -}
177468700783e2e501020523c7d00c37
  main20 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Negative integer is rejected (not a natural number)"#) -}
95a557ade34849395e8eeae0828620db
  main21 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?6
                   Test.HUnit.Base.@?=2
                   Main.main22) -}
9357ff3b32e96e8e7fbc016f64e72216
  main22 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe6
                   Test.Hspec.Expectations.shouldBe2
                   Main.main23) -}
9cc3880739d5e600029c7df543094d5e
  main23 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main32
                   Main.main24
                   GHC.Stack.Types.EmptyCallStack) -}
d228033e9a4ad0ffa8fc5ff7f99a2a9c
  main24 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main31
                   Main.main30
                   Main.main28
                   Main.main27
                   Main.main26
                   Main.main27
                   Main.main25) -}
a98c73eff9b33ee4abe94577c2abdecb
  main25 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 56#) -}
05b5eeb7d7bc1984d6ec2243903795e9
  main26 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 21#) -}
10651730a4c37c0310e9a2205dd55294
  main27 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 18#) -}
4f2ffbf1ab556f55e8078425ac07aee4
  main28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main29) -}
d08926a2d73f99492a89b2d114e166c3
  main29 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test\\Tests.hs"#) -}
a054da79433c1c04f95125cc0ddd2c5d
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Main.$wc
                   Main.main85
                   Main.main84
                   Main.main77
                   Main.main4
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
8342b42f133ad0d81d95bb6514a1c26a
  main30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$trModule2) -}
e882de479a8c0dcb93730227d4a9b591
  main31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$trModule4) -}
618f71be09d224d54d2c9a08801ecb1e
  main32 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main33) -}
b532dd1bc3ebb4d859e987bf01d39172
  main33 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("shouldBe"#) -}
7e48a701bc2860647d7acf87c48dd451
  main34 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location.Location
  {- Unfolding: (Test.Hspec.Core.Tree.location11 Main.main35) -}
bb4c9e33c654e44763a48b0c05319273
  main35 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.location9
                   Test.Hspec.Core.Tree.location1
                   Main.main36) -}
284cc0089506141cef93f94082af8751
  main36 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem14
                   Test.Hspec.Core.Tree.specItem11
                   Main.main37) -}
1c57b64c146a6f97b0038653b7ad0b05
  main37 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it6
                   Test.Hspec.Core.Spec.it2
                   Main.main38) -}
457a8002d1cf9abde4f172935455f4cc
  main38 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main42
                   Main.main39
                   GHC.Stack.Types.EmptyCallStack) -}
de413cebe9fd35c3d6b4a53deb29b74d
  main39 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main31
                   Main.main30
                   Main.main28
                   Main.main41
                   Main.main26
                   Main.main41
                   Main.main40) -}
18b547a33f314bfc972383e7b9c0e17c
  main4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main82
                   Main.main81
                   Main.main77
                   Main.main5
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
1e7c2809efcb0c15433b3446d55679c4
  main40 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 45#) -}
bfc3b9d4e6987de5f5df8a1f67572f86
  main41 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 16#) -}
779a1e74d6f35f6fc71e3fd0b39a0c73
  main42 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main43) -}
50b5be9da6898db59afb64b5893f950d
  main43 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("it"#) -}
abe332b12ae8cb68ab9800f8d835f5ae
  main44 :: GHC.Base.Maybe GHC.Base.String
  {- Unfolding: (Test.Hspec.Core.Tree.specGroup19 Main.main45) -}
195528faeab9c45e12dd871af14f695e
  main45 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.location9
                   Test.Hspec.Core.Tree.specGroup15
                   Main.main46) -}
654ba57f352f81aede5e3565ede0a7c0
  main46 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specGroup13
                   Test.Hspec.Core.Tree.specItem9
                   Main.main47) -}
e5ad58ba00a0b0eb00c7e9012a6b25c3
  main47 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem7
                   Test.Hspec.Core.Tree.specItem3
                   Main.main37) -}
31a9406fb1e312412f117c078cc9b409
  main48 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
8c61ef45f01a5ae2e7d90d382246434c
  main49 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main50) -}
70e52a225c11a1a6db3e99a8c3bda266
  main5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main79
                   Main.main78
                   Main.main77
                   Main.main6
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
b4cbb928d92c034a3d7acf6902fe1edf
  main50 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Zero is rejected (not a natural number)"#) -}
ca3343fe7f6f850717fec048be40aebb
  main51 :: GHC.Base.Maybe PerfectNumbers.Classification
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ PerfectNumbers.Classification
                   PerfectNumbers.Deficient) -}
2139bf1bfaa7c4133c087acbc31ea628
  main52 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
b4fedec6091cae92cfad1c2ff049799f
  main53 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main54) -}
714cfa11a2ef444e48d61843e61929ca
  main54 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Edge case (no factors other than itself) is classified correctly"#) -}
d36ac519fb46efe58444da1701954a73
  main55 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.I# 33550337#) -}
11b0c9a4859522d7d5c239392145e652
  main56 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main57) -}
f8c00fa45da79b1d8d6346d68b516fbe
  main57 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Large deficient number is classified correctly"#) -}
456416c787f05d9f4a20e06764c23c7d
  main58 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 32#) -}
b29abe547fa7d817dc07176e13ff37fa
  main59 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main60) -}
975d4eaa8019c255f3faff593def7acf
  main6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main75
                   Main.main74
                   Main.main67
                   Main.main7
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
45211602ddbdc4c3c1fe0b74ec384595
  main60 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Medium deficient number is classified correctly"#) -}
04f6a355703d708a6f7ed3f09342c4a1
  main61 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
ec09cc3276fce3a652df01193cd7426e
  main62 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main63) -}
82466f666b59392842009d7ca4d37ac8
  main63 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Smallest non-prime deficient number is classified correctly"#) -}
8a9e1978c302d1a708eef860c7ed9971
  main64 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
3abc0205a6c06dd39cc8089890169ceb
  main65 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main66) -}
c872a04700990a7fa96ff0cb8885b361
  main66 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Smallest prime deficient number is classified correctly"#) -}
08f1c51c1bedb43b73095db53a922d18
  main67 :: GHC.Base.Maybe PerfectNumbers.Classification
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ PerfectNumbers.Classification
                   PerfectNumbers.Abundant) -}
d8eb0fa08cab5aba05333cbd73864ead
  main68 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.I# 33550335#) -}
7bf4c89761681af6e7c89af705d11e03
  main69 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main70) -}
f20824bc4687937367c9381d87704545
  main7 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main72
                   Main.main71
                   Main.main67
                   Main.main8
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
cae9ab766872030c7b490ebfae4a0a60
  main70 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Large abundant number is classified correctly"#) -}
b24487c82d92064f264f27441e4e61eb
  main71 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 30#) -}
f56e525ba1987d0d93f07ef22b073093
  main72 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main73) -}
32eb713d7a66a1892f677995da4fa208
  main73 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Medium abundant number is classified correctly"#) -}
b9d57b977fd9eeb611f82eed6be92c1c
  main74 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 12#) -}
19b0383bfcf4fb17621f7056f7be6744
  main75 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main76) -}
99e14f1d77206daedea651bb25c8a576
  main76 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Smallest abundant number is classified correctly"#) -}
eceab230c100fdd730767149b3de1123
  main77 :: GHC.Base.Maybe PerfectNumbers.Classification
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ PerfectNumbers.Classification
                   PerfectNumbers.Perfect) -}
474411cb1482ffa8064c09b650ffdffd
  main78 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.I# 33550336#) -}
49f8ca1c728058bf84af766d30ae11d1
  main79 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main80) -}
4b74a091fc8cf8b8da110f7f6d278142
  main8 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main69
                   Main.main68
                   Main.main67
                   Main.main9
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
bfc8582a7e010760e82964d593dc6db3
  main80 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Large perfect number is classified correctly"#) -}
89650113a5aac0dfeaa58a9157cc70b2
  main81 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 28#) -}
d94ee85419014e00a49cb2b27538a694
  main82 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main83) -}
c40551a7ff66b94b644986565cda42df
  main83 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Medium perfect number is classified correctly"#) -}
c88bd43591d1bcc1f5eb10fc09b3cd7e
  main84 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 6#) -}
84e6be666a08ba824bf4c3ae4ecad022
  main85 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main86) -}
ba50b53245617b84fe015bffbed5d220
  main86 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Smallest perfect number is classified correctly"#) -}
528cc77ff8173950d0efd74d791bc6d3
  main87 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main88) -}
47f40bea2596e8ad0931371084800562
  main88 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("classify"#) -}
27734f589f725e7a93206b982e862666
  main89 ::
    GHC.Base.String
    -> Test.Hspec.Core.Spec.Monad.SpecWith ()
    -> Test.Hspec.Core.Spec.Monad.SpecWith ()
  {- Unfolding: (Test.Hspec.Core.Spec.describe
                   @ ()
                   Main.main90
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))) -}
dfe471cc2d16b2e01baccf2dd608403a
  main9 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main65
                   Main.main64
                   Main.main51
                   Main.main10
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
1443bef9d897be29ef5d277a22e76a81
  main90 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main94
                   Main.main91
                   GHC.Stack.Types.EmptyCallStack) -}
d7d3310874c8149e04e942db6212b27c
  main91 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main31
                   Main.main30
                   Main.main28
                   Main.main93
                   Main.main92
                   Main.main93
                   Main.main81) -}
d2efdbfed8b00c2cce2778dea3cc54f1
  main92 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 9#) -}
cfa71c50f132ca5b8501696c73a5fb9f
  main93 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 13#) -}
230bcdbbded70474d0794172ad6a958f
  main94 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main95) -}
f1389b7d26781759787d0e39c1968189
  main95 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("describe"#) -}
da336bb6f49266c88b3c9d6c4d05cfa9
  main96 :: Test.Hspec.Core.Config.Options.Config
  {- Unfolding: (Test.Hspec.Core.Config.Options.Config
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.True
                   (GHC.Base.Nothing @ GHC.IO.FilePath)
                   GHC.Types.False
                   GHC.Types.False
                   (GHC.Base.Nothing @ (Test.Hspec.Core.Util.Path -> GHC.Types.Bool))
                   (GHC.Base.Nothing @ (Test.Hspec.Core.Util.Path -> GHC.Types.Bool))
                   (GHC.Base.Nothing @ GHC.Integer.Type.Integer)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Test.Hspec.Core.Example.defaultParams1
                   Test.Hspec.Core.Config.Options.ColorAuto
                   GHC.Types.True
                   (GHC.Base.Nothing @ Test.Hspec.Core.Formatters.Monad.Formatter)
                   GHC.Types.False
                   Test.Hspec.Core.Config.Options.defaultConfig1
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
23327d8e14f491a0feeca4af9ba924f7
  main97 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
d49dc681dd761578d7011826413ada9c
  number :: Main.Case -> GHC.Types.Int
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 -> ds2 }) -}
"SPEC/Main $fEqMaybe @ Classification" [orphan] forall (v :: GHC.Classes.Eq
                                                               PerfectNumbers.Classification)
  GHC.Base.$fEqMaybe @ PerfectNumbers.Classification v
  = Main.$s$fEqMaybe
"SPEC/Main $fEqMaybe_$c/= @ Classification" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                       PerfectNumbers.Classification)
  GHC.Base.$fEqMaybe_$c/= @ PerfectNumbers.Classification $dEq
  = Main.$s$fEqMaybe_$s$fEqMaybe_$c/=
"SPEC/Main $fEqMaybe_$c== @ Classification" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                       PerfectNumbers.Classification)
  GHC.Base.$fEqMaybe_$c== @ PerfectNumbers.Classification $dEq
  = Main.$s$fEqMaybe_$c==
"SPEC/Main $fShowMaybe @ Classification" [orphan] forall (v :: GHC.Show.Show
                                                                 PerfectNumbers.Classification)
  GHC.Show.$fShowMaybe @ PerfectNumbers.Classification v
  = Main.$s$fShowMaybe
"SPEC/Main $fShowMaybe_$cshowList @ Classification" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                 PerfectNumbers.Classification)
  GHC.Show.$fShowMaybe_$cshowList @ PerfectNumbers.Classification
                                  $dShow
  = Main.$s$fShowMaybe_$cshowList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

